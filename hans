if __name__ == "__main__":
    from timeit import default_timer as timer


    t0 = timer()

    from NS_hsa import *
    from simulation_parameters import SimulationParameters

    print("""

     _    _          _   _  _____ 
    | |  | |   /\   | \ | |/ ____|
    | |__| |  /  \  |  \| | (___  
    |  __  | / /\ \ | . ` |\___ \ 
    | |  | |/ ____ \| |\  |____) |
    |_|  |_/_/    \_\_| \_|_____/ 
                               """)

    #parsing inputs

    #parent_dir = os.getcwd()
    parent_dir = "." #temporary until hs_alkane can take longer filenames

    parameters = SimulationParameters.parse_args()

    ns_data = ns_info(parameters)

    ns_data.set_directory(parameters.directory)

    energies_file = open(ns_data.energies_filename, "a+")

    #setting params for MC_run
    move_types = ['box','translate', 'rotate', 'dihedral', 'shear', 'stretch']
    ivol = 0; itrans = 1; irot = 2; idih = 3; ishear = 4; istr = 5
    move_ratio = np.zeros(6)
    move_ratio[ivol] = 1
    move_ratio[itrans] = 3.0*ns_data.parameters.nchains
    move_ratio[irot] = (2.0*ns_data.parameters.nchains) if ns_data.parameters.nbeads >= 2 else 0
    move_ratio[idih] = 1.0*max(((ns_data.parameters.nbeads-3.0)*(ns_data.parameters.nchains),0))
    move_ratio[ishear] = 3
    move_ratio[istr] = 3

    # print(move_ratio)

    dof = 0


    if move_ratio[0] != 0:
        dof+= 3*ns_data.parameters.nchains
    if move_ratio[1] != 0:
        if ns_data.parameters.nbeads <= 2:
            dof+= 2*ns_data.parameters.nchains
        else:
            dof+= 3*ns_data.parameters.nchains




    if parameters.previous_iterations == 0:

        print("Creating New Output File")


        energies_file.write(f"{ns_data.parameters.nwalkers} {1} {dof} {False} {ns_data.parameters.nchains} \n") #ns_analyse info data

        #energies_file.write(f"{ns_data.parameters}\n") #META DATA ABOUT THE RUN

    energies_file.close()

    ###################################################################
    active_box = ns_data.parameters.nwalkers+1


    initialise_sim_cells(ns_data)
    #alk.alkane_set_bondlength(ns_data.parameters.bondlength)



    #random seeds
    #np.random.seed(1)
    #alk.random_set_random_seed(1)

    ###################################################################

    #creating initial boxes/loading boxes from restart folder

    parameters.configure_system()
        
        
    #setting step sizes
    alk.alkane_set_dr_max(0.65)
    alk.alkane_set_dt_max(0.43)
    alk.alkane_set_dh_max(0.4)
    alk.alkane_set_dv_max(0.5)

    ns_data.set_dshear_max(0.5)
    ns_data.set_dstretch_max(0.5)



    #moves_prob = np.cumsum(moves_ratio)/np.sum(moves_ratio)

    dof_sum = np.sum(move_ratio)-7


    #constructing dictionaries which contain initial volumes

    if parameters.previous_iterations == 0:
        ns_data.perturb_initial_configs(move_ratio)
    else:
        ns_data.load_volumes()
        
    # main driver code
    ##############################################################


    #snapshots = 1000
    #vis_interval = max(1,parameters.total_iterations//snapshots)
    vis_interval = 1000

    # restart_interval = int(5e3)
    # print_interval = int(1e2)

    ns_data.set_intervals(vis_interval = vis_interval)


    print(parameters.previous_iterations,parameters.previous_iterations+parameters.total_iterations)
    perform_ns_run(ns_data,parameters.total_iterations, 
                    prev_iters=parameters.previous_iterations,move_ratio = move_ratio, verbose = True)
            
        

    energies_file.close()

    write_configs_to_hdf(ns_data,parameters.previous_iterations+parameters.total_iterations)

    #overlap check
    ns_data.check_overlaps()

    time_taken = ns_data.time_elapsed()

    print(f"---------Time elapsed is {int(time_taken//60):0>2}:{time_taken%60:0>6.3f}---------")
